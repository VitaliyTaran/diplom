 
СОДЕРЖАНИЕ

Введение	6
1	Обзор научной литературы	7
1.1 	Алгоритмы поиска оптимального пути	7
1.2	Анализ существующих приложений и их недостатки	13
1.3      Выводы и постановка задачи.	15
2	Проектрирование приложения 	17
2.1 	Особенности проектируемой системы	17
2.2 	Анализ требований к системе	17
2.3 	Критерии оптимальности построения пути при проектировании алгоритма	18
2.4 	Принципы построения маршрута	20
2.5 	Разработка структуры приложения	23
2.6	Проектирование структуры базы данных	27
2.7 	Вывод к разделу	30
3 Разработка приложения	31
3.1      Выбор языка программирования	31
3.2      Выбор базы данных	31
3.3	Выбор средств разработки	36
3.4	Описание используемых технологий	37
3.5	Руководство пользователя	39
3.6	Вывод к разделу	45
4 Испытание приложения	46
4.1      Принципы тестирования	46
4.2      Использованные библиотеки и фреймворки	47
4.3      Модульное тестирование	48
4.4      Интеграционное тестирование	49
4.5      Выводы к разделу	51
5  Технико-экономисеское обоснование	52
5.1  Краткая характеристика разрабатываемого сайта	52
5.2  Расчет себестоимости и цены программного продукта	52
6 Охрана труда и тезника безопастности на предприятии	57
6.1 Организация системы управления охраной труда в академии связи в соответствии с «Гигиеническим нормативом о содержания загрязняющих химических веществ в атмосферном воздухе, обладающих эффектом суммации»	57
6.2 Идентификация и анализ вредных и опасных факторов	59
6.3 Организационные, технологические и иные решения по устранению опасных и вредных факторов	61
6.4 Вредные химические вещества	62
6.5 Выводы и предложения по улучшению условий труда	66
Список используемой литературы	68
Приложение	70



АННОТАЦИЯ

      Данная дипломная работа посвящена разработке программного средства построения оптимального маршрута в условиях загрязнения, окружающей среду. 
      В первом разделе рассмотрены основные алгоритмы, используемые в построении маршрутов и также обзор аналогичных программных решений. 
      Во втором разделе произведен проектирование программного средства, построены основные диаграммы, разработаны структура приложения и базы данных. 
      В третьем разделе произведен выбор средств разработки, перечисление основных фреймворков использованных при написании приложения, составлено руководство пользователя. 
      В четвертом разделе произведено тестирование приложения выбрано методология тестирования описаны основные подходы к тестированию, применяемые при написании диплома. 
      В пятом разделе сделали экономическую характеристику разрабатываемого программного продукта. Рассчитали себестоимость разработки.
      В шестом разделе выполнен анализ загрязняющих факторов окружающей среды, рассмотрена нормативно правовая база по гигиеническому нормативу. Разработан перечень предложений по улучшению условий труда
      Объем пояснительной записки составляет 81 лист и содержит 4 таблицы, 28 рисунка, 15 формул, 28 источников литературы.


     ВВЕДЕНИЕ
      
      Оптимизация маршрута – задача, возникающая перед любыми организациями в самых различны отраслях, которые характеризуются наличием транспортной и/или логистической сети. Задача нахождения оптимального маршрута которая впервые освещалась в 1832 году в книге «Коммивояжера».  Она вовсе не нова и является актуальной на сегодняшний день, рассматриваются и разрабатываются новые алгоритмы, программы и приложения, которые позволяют работать с количеством с большим количеством узлов и обладают достаточно большой эффективностью, что позволяет достаточно быстро решать поставленные задачи. Существует множество онлайн и офлайн сервисов, решающих задачу построения оптимального маршрута. Рассмотрим данную задачу на нашем примере: существует определенное число датчиков загрязнения воздуха, находящихся в черте города, задача приложения просчитать оптимальный маршрут между двумя точками на карте.
      Вопросы оптимизации маршрута поднимаются в трудах таких известных деятелей математики как Уильям Роуэн Гамильтон, Джордж Данциг, Ричард Мэннинг Карп, Дэвид Аплгейт, Герхард Райнельт[1].
      Цель данной работы заключается в интегрировании алгоритма задачи коммивояжера в Google.Maps с использованием технологии на примере приложения поиска оптимального маршрута между двумя точками на карте в условиях загрязнении окружающей среды.
      Дипломная работа разделена на четыре главы. В первой главе «Обзор научно-технической литературы» представлен обзор предметной области, описывается функциональность приложения, определяются границы проекта, проводится анализ алгоритмов для решения задачи. Во второй главе «Проектирование системы» представлено проектирование программного средства, выбор необходимого алгоритма поиска оптимального пути и обоснование выбора. В третьей главе «Разработка системы» рассказано, какие инструменты использовались при создании проекта, анализ выбора языка программирования и элементы реализации. Четвертая глава посвящена испытанию программного средства посредством unit-тестирования.
      
      
      
      
      
      
      
 ОБЗОР НАУЧНОЙ ЛИТЕРАТУРЫ

      Первая глава состоит из обзора предметной области, включающего в себя описание и выбор алгоритма решения задачи поиска оптимального пути, а также анализа уже существующих приложений. Ставится задача диплома, формулируются требования к ее реализации.
      
      1.1 	Алгоритмы поиска оптимального пути

      Алгоритмы для решения задачи коммивояжера можно разделить на точные (exact algorithm) и неточные (non-exact algorithm). Точные алгоритмы включают в себя перебор всех возможных вариантов, в частных случаях решения могут быть быстро найдены, но в целом осуществляется перебор n! циклов. Вторые в общих случаях применяются для задач, которые невозможно решить точно (вычисление определенных интегралов, решение нелинейных уравнений, извлечение квадратного корня…), если существующие точные решения требуют значительных и неоправданных временных затрат при высокой сложности задачи, и как часть более сложного алгоритма, с помощью которого задача решается точно. [2] 
1.1.1 	Точные алгоритмы.
      В свою очередь существует две группы точных алгоритмов — одна из них использует методы релаксации линейного программирования TSP: алгоритм Гомори, метод внутренней точки, метод ветвей и границ; вторая, меньшая группа, использует методы динамического программирования. Характерная особенность методов обеих групп — гарантия нахождения оптимальных решений при общей трудоемкости процесса. [3] Полный перебор (Brute Force).
      Один из самых очевидных методов решения задачи коммивояжера – метод полного перебора или грубой силы. Его суть заключается в переборе всех возможных вариантов путей, алгоритм решения можно записать как: 
 найти общее число возможных гамильтоновых контуров;
 найти вес каждого гамильтонова контура, сложив вес всех его ребер;
 выбрать гамильтонов контур с минимальным весом, который и будет оптимальным. 
      Метод полного перебора обладает рядом преимуществ – он гарантирует нахождение решения задачи TSP, при этом он прямолинеен и прост в исполнении. В то же время, алгоритм считается неэффективным при работe с большим объемом данных, так как для нахождения оптимального маршрута требует найти вес (n -	1)! гамильтоновых контуров.
      Метод ветвей и границ (Branch and Bound).
      Метод ветвей и границ часто используется для нахождения оптимального решения задач комбинаторной оптимизации. Его суть заключается в разбитии множества на подзадачи и исключении заведомо неоптимальных решений. 
      Пусть граф V содержит все города, ? – множество всех перестановок городов, покрывающее все возможные решения. Рассмотрим перестановку ???, в которой каждому городу назначается преемник – i для ?i города. Таким образом, тур можно записать как (1,?  (1),?  (?  (1)),…,1).  Если число городов в туре равно n, тогда перестановку называют циклической. Задача о назначениях ставит перед собой цель найти циклические перестановки, а задача коммивояжера преследует ту же цель, но с ограничением, что у этих перестановок должна быть минимальная стоимость. Метод ветвей и границ в первую очередь находит решение задачи о назначениях, стоимость которой для n городов довольно большая и асимптотически равна O (n^3). [4]
       Если был найден полный тур, то полученное значение также является решением задачи коммивояжера. В противном случае проблема разделяется на несколько подобластей, каждая из которых исключает некоторые дуги под тура, таким образом исключая сам под тур. Метод, с помощью которого высчитывается, какую дугу следует удалить, называют правилом ветвления. Важное замечание – не должно существовать дублированных подзадач, их общее количество должно быть минимизировано.
      Будем использовать критерий, гарантирующий независимость подзадач – рассматривается включенный набор дуги и выбирается минимальное число дуг, которые не принадлежат набору. Обозначим E как множество исключенных дуг и I как множество включенных. Разложим I. Выберем t дуги подобластей	 x5x6…x7 которые не принадлежат I. Задача разделена на t потомков так, чтобы у j_th потомка были E_j исключенных дуг и I_jвключенных дуг. Запишем в виде формулы:
      
      
      (1.1)
      
       Но  x_j исключенная дуга j_thподзадач и включенная дуга в (j+1)_st области. Это значит тур, полученный решением (J+1)_st задачи, может иметь x_j дугу, но тур, полученный решением (J+1)_st не содержит эту дугу. Это гарантирует отсутствие дублирующихся маршрутов. 
      Количество возможных решений равно (n-1)!/2, для n=50 это приблизительно 3?1062. Этот метод наиболее часто используется при количестве узлов от 40 до 60. [5] 
      Необходимость целиком решать задачи линейного программирования во всей области допустимых решений можно считать главным недостатком вышеописанного метода. Для задач с большим объемом данных метод ветвей и границ является неоправданно трудоемким, в то же время алгоритм является надежным методом решения целочисленных задач. 
      Алгоритм Гомори (The Cutting Plane).
      В 1954 году была представлена работа Данцига, Фалкерсона и Джонсон, описывающая новый метод решения задачи коммивояжера, который также может быть использован для решения любой проблемы.
      
      
      (1.2)
      
        где c?0, S – конечное подмножество некоторого R^m, и таким образом это мы сможем найти точки S. Это итерационный алгоритм – каждое повторение начинается с линейной программной релаксации. Запишем в виде формулы: 
      
      
      (1.3)

      где многогранник P, определенный как {x?  Ax  ?  b}, содержит S и ограничен. Так как P ограничен, мы можем найти оптимальное решение x* как экстремальную точку P. Если x* принадлежит S, то оптимальное решение найдено (2.2); в противном случае некоторое линейное неравенство удовлетворяет все точки S и нарушает x*. Такое неравенство называют алгоритмом Гомори, который подробно описал его 1958, методом отсекающих плоскостей или просто отсечений. [6]
      Данный метод используется для построения точных или приближенных задач, особенно часто встречается в сочетании с методом ветвей и границ и тогда называется методом ветвей и отсечений. Оба метода основаны на решении последовательности релаксированных подзадач линейного программирования. В алгоритме Гомори релаксированные подзадачи постепенно улучшают аппроксимацию целочисленной задачи, уменьшая окрестность оптимального решения. Если оптимальность не удалось получить, тогда ищется приближенное решение с погрешностью.
      У метода отсечений есть преимущество над методом ветвей и границ – первые более удобны для аппаратного вычисления, так как для их решения не требуется большой объем оперативной памяти для хранения дерева решений. [7] 
      Метод динамического программирования (Dynamic Programming).
       Рассмотрим задачу с n городами и расстояниями d_ijмежду любыми двумя городами, путь начинается и заканчивается в городе n_0. TSP может быть решена за время O(n!) методом полного перебора, но алгоритм динамического программирования позволяет сократить то время до O(n^2 2^n ). 
        Данный метод используется для повышения эффективности вычислительных повторений, храня промежуточные результаты и снова используя их при необходимости. 
      
 Неточные алгоритмы.
      В целом алгоритмы данной группы предлагают потенциально неоптимальные, но быстрые решения. В свою очередь приближенные алгоритмы можно разделить на две категории: приближенные (Approximation Algorithms) и эвристические (Heuristic Algorithms). 
      Алгоритм Кристофидеса (Christofides’ Algorithm) 
      Алогоритм Кристофидеса используется для решения метрических TSP – с дополнительным условием, что для матрицы расстояний выполнено неравенство треугольника: 
      
      ?i,j,k  d_ik ? d_ij+ d_jk                                                (1.4)
      
         Большая часть эвристических алгоритмов относятся к 2-приближенному классу. Профессор Никос Кристофайдс в 1976 году доработал один из существующих алгоритмов (метод двойного минимального остовного дерева, O(n^2 log_2 (n))) так, что время решения задачи не превышает оптимальное время более чем на 3/2. Задача продублировать все ребра и построить эйлеров граф, построить гамильтонов цикл, пройдя каждый узел только один раз и выбирая наикратчайших путь, ведущий из каждого узла.[9] 
       Решение оригинального алгоритма можно записать так: найти минимальное дерево из множества всех городов, продублировать все ребра и построить эйлеров граф, построить гамильтонов цикл, пройдя каждый узел только один раз и выбирая наикратчайших путь, ведущий из каждого узла.
       Алгоритм Кристофидеса состоит из последовательности следующих действий: 
 найти минимальное дерево из множества всех городов; 
 найти паросочетание с минимальным весом множества вершин нечетной степени и построить эйлеров граф; 
 найти эйлеров обход и построить гамильтонов цикл, избегая посещаемых узлов.
      Основное различие – дополнительное вычисление пар сочетания с минимальным весом. Эта часть также самая трудоемкая, поэтому время выполнения алгоритма возрастает до O(n^3). Проведенные тесты показали, что алгоритм Кристофидеса на 10% выше нижней границы Хелд-Карп. [11] 
      Алгоритм ближайшего соседа (NearestNeighbour) 
      Один из самых простых эвристических методов решения TSP. Главное правило алгоритма – всегда выбирать близлежащий город (соседа). Решение задачи складывается из следующих шагов:
 выбрать любой город; 
 найти близлежащий город, не включенный в маршрут, и перейти в него; 
 проверить остались ли города, не включенные в маршрут, если ответ положительный – повторить второй шаг.  
 чтобы завершить тур добавить ребро между последним выбранным городом и первым.
       В общем случае трудоемкость решения задачи равна O(n^2). Нижняя граница стоимости оптимального маршрута на 10% выше нижней границы Хелд-Карп. [12] 
      Жадный алгоритм (Greedy).
      Чтобы решить TSP использование жадный алгоритм, мы исследуем все ребра, выходящие из города-узла, и выбираем n самых коротких дуг. Если те n самых коротких дуг формируют гамильтонов цикл, тогда мы нашли оптимальное решение. [13] Трудоемкость решения задачи жадным алгоритмом равна O(n6). Нижняя граница стоимости оптимального маршрута выше нижней границы Хелд-Карп на 15-20%. [10] 
      Алгоритм Кернигана – Лина (Lin-Kernighan).
      Алгоритм Кернигана – Лина считается один из самых эффективных методов поиска оптимальных или почти оптимальных решений задачи коммивояжера. Однако разработка и реализация алгоритма не проста, так как алгоритм состоит из множества шагов, большинство из которых сильно влияет на работу алгоритма. [14] Создание алгоритма Кернигана было вдохновлено наблюдением, что статическое K в -оптимальном методе не дает наилучшее решение. Появилась идея использовать различные стадии -оптимального метода в выполнении эвристического алгоритма. На практике было показано, что практически невозможно заранее предугадать какое K следуюет использовать, чтобы достигнуть лучшего компромисса между трудоемкостью и качеством решения. Лин и Керниган убрали этот недостаток, введя оптимальную переменную, таким образом значение K меняется во время выполнения алгоритма. [15] Трудоемкость при этом равна O(n^2.2). 
      Алгоритм поиска с запретами (TabuSearch).
      Главная проблема алгоритма ближайшего соседа состоит в частом застревании в точке локального оптимума. Этого можно избежать, применив алгоритм поиска с запретами, в 1977 году предложенный Ф. Гловером. Данный метод позволяет переходить от одного локального оптимума к другому в поиске глобального оптимума, после перехода ребро попадает в список запретов и повторно не используется, кроме случаев, когда оно может улучшить построенный оптимальный путь. На практическом уровне запрещенный набор сохраняется как комбинация ранее посещаемых шагов, который позволяет построить дальнейший путь относительно текущего решения и соседних узлов. [16] Главным недостатком этого метода служит его время выполнения – трудоемкость алгоритма оценивается как O(n^3). [11] 
      Муравьиный алгоритм (Ant Colony Optimization).
      Муравьиный алгоритм – эффективный полиномиальных алгоритм, вдохновленный вдохновлена поведением настоящих муравьев. Впервые его принципы были описаны в 1991 Марко Дориго. Муравьям свойственно сотрудничать в поисках пищевые ресурсы, поэтому они оставляют след химического вещества, феромонов, на их пути от гнезда до источника пищи. [15] Этот тип невербальной коммуникации называют стигмергия – стимуляция, основанная на опыте предыдущих муравьев и направленная на повышение производительности. [17] 
      Для решения задачи коммивояжера как правило используют около 20 муравьёв. Их размещают в случайные города и отправляют в другие города. Им не позволяют дважды посещать один и тот же город, только если они не завершают маршрут. Тот муравей, который выбрал самый короткий тур, будет оставлять след феромонов обратно пропорциональный длине маршрута. Этот след феромонов будет считываться следующим муравьем при выборе города, и с большой вероятность он пойдет тем же путем, еще сильнее укрепив след. Этот процесс будет многократно повторен пока не будет найдет маршрут, достаточно короткий, чтобы быть оптимальным. Среди недостатков алгоритма хочется выделить, что первое полученное решение может оказаться одним из худших в плане оптимизации, однако при повторном решении метод выдает достаточно точный результат. [18] 
      Нижняя грань Хелд-Карпа (The Held-Karp Lower Bound).
      Самый распространенный способ измерить эффективность эвристического алгоритма для решения TSP – это сравнить результаты с нижней гранью Хелд-Карпа. Эта нижняя грань является решением TSP, найденным за полиномиальное время при помощи симплекс-метода. Нижняя грань Хелд-Карпа приблизительно 0.8% ниже оптимальной продолжительности тура. [19] В то же время она гарантировано не превышает оптимальное время более чем на 2/3. [11] 
      По состоянию на 2015 алгоритм Кристофидеса считается самым эффективных методом для решения задачи коммивояжера на общих метрических пространствах, хотя известны лучшие приближения для частных случаев. Также хорошо в тестах себя показали алгоритм Кернигана-Лина и жадный эвристический алгоритм. [11]
      Алгоритм Дейкстры - алгоритм на графах, изобретённый нидерландским ученым Э. Дейкстрой в 1959 году. Находит кратчайшее расстояние от одной из вершин графа до всех остальных. Работает только для взвешенных графов без рёбер отрицательного веса. Сложность алгорима O, что делает его одним из самых эффективных. Он может работать как с однонаправленными, так и с двунаправленными графами.
      
 Анализ существующих приложений и их недостатки

      Популярные картографические сервисы вроде Яндекс.Карты и Google Maps предоставляют пользователям возможность поиска оптимально пути, однако, в условиях загрязнения окружающей среды они не работают. При вводе нескольких координат сервис выстраивает маршрут в том порядке, в котором данные были введены. Пользователи могут выбирать средства передвижения (на машине, пешком, на наземном транспорте), но все эти настройки влияют исключительно на варианты построения маршрута между его фиксированными точками. 
      Анализ провели путем сравнения десятков картографических сервисов, как русскоязычных, так и зарубежных, показал, что среди самых популярных вариантов ни одного из них не работает построение маршрута в условиях загрязнения окружающей среды. Ниже представлен подробный отчет о трех наиболее достойных внимания сервисах и их недостатках. Среди русскоязычных сервисов в первую очередь можно выделить Poncy-ru[10]. Он включает в себя конструктор карт, визуализацию GPS треков и построение оптимальных маршрутов. 
      Следующий русскоязычный сервис Логист [20] обладает меньшим количеством недостатков, но все они существенны: 
 среди средства передвижения возможен выбор между автомобилем (построение маршрута по проезжим дорогам) и вертолетом (прямой путь между пунктами маршрута); 
 сервис в первую очередь рассчитан для решения задач логистики и построения маршрута перевозок продукции между городами (Рис. 1.1). 


      
      Рисунок 1.1 - Сервис Логист.
      
      Среди зарубежных картографических сервисов с функцией построения оптимального маршрута наиболее популярен Speedy Route [21]. В описании продукта сказано, что сервис рассчитывает наиболее эффективный по количеству затрат топлива маршрут между несколькими локациями, где исходная и конечная точка едины. В описании продукта сказано, что сервис рассчитывает наиболее эффективный по количеству затрат топлива маршрут между несколькими локациями, где исходная и конечная точка едины (Рис. 1.2). В первую очередь можно выделить такие недостатки как: 
 Speedy Route рассчитан исключительно для автомобилистов; 
 среди средства передвижения возможен выбор между автомобилем (построение маршрута по проезжим дорогам) и вертолетом (прямой путь между пунктами маршрута);
 при вводе данных возникают трудности перевода русскоязычных названий на английский язык;
 у сервиса предусмотрено минимальное количество пунктов маршрута – 5; маршруты, состоящие из 4 пунктов построить невозможно;  
 на сайте представлена урезанная версия карты для ознакомления, для доступа к полной версии требуется оформить платную подписку;
 Не работает в условиях загрязнения окружающей среды что делает программу невозможной в приминиенни для наших целей;
 Приложение не работает с реальными сенсорами.
 Не предлагает альтернативные маршруты.
 Нету возможности выбора критерия построения маршрута


      
      Рисунок 1.2 - Сервис Speedy Route
      
      Суммируя все вышеперечисленное, можно сказать, что пока не существуют сервисы, которые бы строили оптимальные пешеходные маршруты внутри города и одновременно были удобными и понятными для пользователей при взаимодействии с ними.
      
1.3 Выводы и постановка задачи.

      Задача данного дипломного проекта – разработка алгоритма построения оптимального маршрута в условиях загрязнения окружающей среды. То есть необходимо разработать систему, которая бы учитывала различные параметры загрязнения воздуха сравнивало их с заданными ПДК (предельно допустимая концентрация) разных газов и учитывая расстояние между сенсорами с учетом их координат прокладывало самый оптимальный маршрут, самый короткий маршрут и самый чистый маршрут.. 
      Для достижения поставленной цели необходимо создать клиентскую и серверную части приложения. Приложение будет размещено на удаленном сервере и предоставит клиенту пользовательскую UI в виде страницы в браузере. 
      В данной главе были рассмотрены множество различных алгоритмов, однако у каждого из них есть свои преимущества и недостатки, одни из них не работают с взвешенными графами, другие имеют слишком большую сложность что не позволяет применять их в сравнительно больших системах.
      В качестве алгоритма построения оптимального маршрута в условиях загрязнения окружающей среды был выбран Алгоритм Дейкстры, так как он имеет сравнительно простую реализацию и оптимальную производительность, даже с учетом работы алгоритма с большим количеством точек. Сложность алгоритма порядка  mlogn. Для сравнения остальные алгоритмы имеют сложность порядка n^2,n^3,n^2 2^n. Следовательно выбранный алгоритм будет иметь большую производительность на той же аппаратной основе, ввиду своей легкости.
      В процессе написания курсового проекта должны быть решены следующие задачи:
 Разработка структурной модели для визуального представления решаемой задачи;
 Разработка базы данных для хранения всей необходимой информации включая положение сенсоров и их показания;
 Разработка сервера, взаимодействующего с базой данных для выполнения запросов клиента;
 Разработка удобного и наглядного пользовательского интерфейса на клиентской части приложения, обеспечивающего эффективное использование функций приложения;
 Тестирование разработанного ПО.





























 ПРОЕКТИРОВАНИЕ ПРИЛОЖЕНИЯ

      2.1 	Особенности проектируемой системы 

      Оптимизация маршрута – это задача которая может возникнуть в любой организации, имеющей даже косвенное отношение к логистике. Данная задача, а именно задача нахождения оптимального маршрута, была впервые освещена в 1832 году в книге «Коммивояжера». Над этой задачей работали многие ученые и не только математики и логисты. Достаточно вспомнить задачу о Кенигсбергских мостах. В которой необходимо пройти по всем мостам Кенигсберга, не пройдя по одному и тому же два и более раза. Так что задача по оптимизации маршрутов становится актуальнее с каждым днем, ввиду роста новой инфраструктуры и разрушении или реставрации новой. Программ и приложений, которые могут работать с большим количеством узлов и обладают достаточно большой эффективностью достаточно мало, это обусловлено наличием большого количества внешних факторов и достаточно большой сложностью алгоритмов. В виду того, что большинство алгоритмов занимаются перебором ребер графа по определенным правилам – это позволяет уменьшить трудоемкость алгоритма и повысить его точность, что позволяет решать поставленные задачи быстрее, чем программы использующие более трудоемкие алгоритмы. К примеру, алгоритм дискретного перебора. Который без сомнения является точным, но в виду того, что рост графа приводит к росту времени обработки, которое растет несоизмеримо сильнее. От алгоритмов подобного типа отказались. 
      В разрабатываемом приложении будет реализована возможность обмена данными сенсорами и пользователем. В данном случае администратор должен будет внести координаты сенсоров и наличие дуг между сенсорами. Для того, чтобы обеспечить эффективность и надёжность работы приложения целесообразно реализовать следующие компоненты:
 Обеспечение доступа к данным, на удалённом сервере;
 Обеспечить целостность данных на базе данных.
 Реализовать удобный и понятный пользовательский интерфейс:
 Возможность интеграции разрабатываемого программного модуля с другими компонентами логистических систем.

      2.2 	Анализ требований к системе

      Необходимо учесть следующие требования:
       Программа должна быть реализована с использованием языка программирования Java;
       Необходимо обеспечить сетевое взаимодействие клиентской и серверной частей приложения с помощью протокола TCP/IP(Sockets);
       В качестве источника данных должна использоваться реляционная база данных, создаваемая с помощью СУБД PostgreSQL 9.0 и выше;
       Обеспечение разделения реализации и бизнес-логики;
       К приложению должен быть разработан пользовательский GUI-интерфейс; 
       GUI-интерфейс должен быть реализован посредством веб сайта 
      Выдвинутые требования позволят создать программный продукт, архитектура которого будет полностью соответствовать наиболее эффективной модели реализации поставленной задачи. 
      
      2.3 	Критерии оптимальности построения пути при проектировании алгоритма
      
      По гигиеническому нормативу «Гигиенический норматив содержания загрязняющих химических веществ в атмосферном воздухе, обладающих эффектом суммации» от министерства здравоохранения Республики Беларусь 30.03.2015 №33. Установлены нормы ПДК для наиболее распространенных загрязняющих веществ. [22]
      Настоящий Гигиенический норматив устанавливает величины предельно допустимых концентраций (далее – ПДК), ориентировочных безопасных уровней воздействия (далее – ОБУВ) загрязняющих веществ в атмосферном воздухе населенных пунктов и мест отдыха населения, обладающих эффектом суммации.
      Требования настоящего Гигиенического норматива обязательны для соблюдения государственными органами, иными организациями, физическими лицами, в том числе индивидуальными предпринимателями, при проектировании, строительстве, реконструкции, техническом перевооружении и эксплуатации производственных и других объектов хозяйственной деятельности.
       Настоящий Гигиенический норматив используется в целях охраны атмосферного воздуха, профилактики неблагоприятного воздействия загрязняющих веществ на здоровье населения в населенных пунктах и местах отдыха населения.
      Основой настоящего Гигиенического норматива являются комплексные токсиколого-гигиенические и эпидемиологические исследования с учетом международного опыта проведения данных исследований.
      Для целей настоящего Гигиенического норматива используются основные термины и их определения в значениях, установленных Законом Республики Беларусь от 7 января 2012 года «О санитарно-эпидемиологическом благополучии населения» (Национальный реестр правовых актов Республики Беларусь, 2012 г., № 8, 2/1892), Законом Республики Беларусь от 16 декабря 2008 года «Об охране атмосферного воздуха» (Национальный реестр правовых актов Республики Беларусь, 2009 г., № 4, 2/1554), а также следующие термины и их определения:
      лимитирующий показатель вредности – показатель, характеризующий направленность биологического действия загрязняющего вещества;
      ОБУВ – временный гигиенический норматив максимального допустимого содержания загрязняющего вещества в атмосферном воздухе населенных пунктов;
      ПДК – концентрация, не оказывающая на протяжении всей жизни человека прямого или косвенного неблагоприятного воздействия на настоящее или будущие поколения, не снижающая работоспособности человека, не ухудшающая его самочувствия и санитарно-бытовых условий жизни;
      резорбтивное действие загрязняющего вещества – возможность развития общетоксических, гонад токсических, эмбриотоксических, мутагенных, канцерогенных и других эффектов, возникновение которых зависит не только от концентрации вещества в атмосферном воздухе, но и от длительности его вдыхания. С целью предупреждения развития резорбтивного действия устанавливается среднесуточная ПДК (далее – ПДКс.с.);
      рефлекторное действие загрязняющего вещества – реакция со стороны рецепторов верхних дыхательных путей (ощущение запаха, раздражение слизистых оболочек, задержка дыхания и другие реакции). Данные эффекты возникают при кратковременном воздействии вредных веществ, поэтому рефлекторное действие лежит в основе установления максимальной разовой ПДК (далее – ПДКм.р.);
      рефлекторно-резорбтивное действие загрязняющего вещества – действие загрязняющего вещества, при котором эффекты на организм реализуются за счет влияния на нервные окончания в месте контакта с веществом и в результате всасывания вещества и поступления его в общий кровоток.
      Предотвращение появления запахов, раздражающего действия и рефлекторных реакций у населения при кратковременном (не более 8 часов) воздействии загрязняющих атмосферный воздух веществ на человека обеспечивается соблюдением ПДКм.р..
      Отсутствие развития вредных, в том числе канцерогенных, эффектов при длительном воздействии на человека отдельных загрязняющих атмосферный воздух веществ, обеспечивается соблюдением среднегодовой ПДК.
      Данные эффекты возникают при кратковременном воздействии вредных веществ, поэтому рефлекторное действие лежит в основе установления максимальной разовой ПДК (далее – ПДКм.р.);
Таблица 2.1 – Перечень предельно допустимых концентраций загрязняющих веществ в атмосферном воздухе населенных пунктов и мест отдыха населения, обладающих эффектом суммации
КодНаименование загрязняющего веществаХимическая формулаКласс опасностиМаксимальная разовая величина предельно допустимой концентрации (мкг/м^3)0337Углерод оксид (окись углерода, угарный газ)СО45000,00526ЭтиленC2H433000,00502Бут-1-ен (бутилен)C4H843000,02908Пыль неорганическая, содержащая двуокись кремния в %: менее 70 (шамот, цемент, пыль цементного производства - глина, глинистый сланец, доменный шлак, песок, клинкер, зола, кремнезем, доломит, пыль цементного производства - известняк, мел, огарки, сырьевая смесь, пыль вращающихся печей, боксит и др.)3300,01401Пропан-2-он (ацетон)С3Н6О4350,00521Пропен (пропилен)С3Н633000,01301Проп-2-ен-1-аль (акролеинС3Н4O230,0
      2.4 	Принципы построения маршрута
      
      Моделирование алгоритма Дейкстры для поиска оптимального пути 
      В первой главе дипломной работы было представлено сравнение алгоритмов. Для написания программного продукта для построения оптимального пути в условиях загрязнения окружающей среды был выбран алгоритм Дейкстры. В виду сравнительно небольшой сложности алгоритма.
      Рассматриваемый алгоритм состоит из следующий шагов [23]:
 Всем вершинам за исключением первой, присваивается вес равный бесконечности, а первой вершине 0;
 Все вершины не выделены;
 Первая вершина объявлена текущей;
 Вес всех невыделенных вершин пересчитывается по формуле. Вес невыделенной вершины есть минимальное число старого веса данной вершины, суммы веса текущей вершины и веса ребра, соединяющего текущую вершину с невыделенной;
 Среди невыделенных вершин ищется вершина с минимальным весом. Если таковая не найдена, то есть вес всех вершин равен бесконечности, то маршрут не существует. Следовательно, выход из цикла. Иначе текущей становится найденная вершина. Она же выделяется;
 Если текущей вершиной является конечная, то путь найден и его вес есть вес конечной вершины;
 Переход на шаг 4.
      В программной реализации алгоритма Дейкстры построим множество S вершин для которых кратчайшие пути от начальной вершины уже известны. На каждом шаге к множеству S добавляется та их оставшихся вершин расстояние до которой от начальной вершины меньше, чем до других оставшихся вершин. 
      Псевдокод алгоритма представлен на рисунке.
      

      
Рисунок 2.1 – Пример взвешенного направленного графа
      
Таблица 2.1- Таблица маршрута для примера
ИтерацияSWD[2]D[3]D[4]D[5]Начало{1}-10?301001{1,2}21060301002{1,2,4}4105030903{1,2,4,3}3105030604{1,2,4,3,5}510503060      
      В проектируемой программе Алгоритм Дейкстры будет подвержен некоторым модификациям так как изначальный вариант не может построить путь, а может только лишь найти минимальную стоимость прохождения графа он одной точки до всех остальных. В нашем же случае программа помимо того, что должна строить маршрут прохождения по сенсорам, она должна учитывать координаты сенсоров их уровни загрязнения. Таким образом сенсоры, обладающие большими показателями загрязнения, будут игнорироваться, хотя и могут располагаться близко друг к другу.
      Для построения маршрута алгоритму Дейкстра необходим направленный взвешенный граф с неотрицательными значениями ребер. Это означает что у каждого ребра графа должно быть направление и неотрицательная стоимость прохода. Для выбора значения проход алгоритм может принимать расстояние между точками или значение загрязнения окружающей среды в сравнении с ПДК по определенному виду загрязнения. Также принимать взвешенное решение для него алгоритм просчитывает расстояние между точками и умножает на коэффициент, который зависит от загрязненности. Таким образом сенсоры, которые стоят рядом, но обладают большим уровнем загрязненности будут игнорироваться при построении маршрута, так как в построенном графе будут иметь достаточно большую стоимость прохождения.
      В классическом исполнении алгоритм Дейкстры не способен воссоздать путь по которому он пришел к конечной точке для построения путей мы спроектировали класс Multilist который помимо значений вершины которая помечена алгоритмом будет хранить информацию текущей, предыдущей и следующей вершине. Что позволит алгоритму высчитать помимо общей ценности прохода из точки А в точку Б еще и путь прохождения алгоритма.
      Диаграмма алгоритма поиска оптимального пути на основе Алгоритма Дейктсры рисунок (2.2)
      
      
      
      Рисунок 2.2 – Алгоритм Дейкстры
      
2.5 	Разработка структуры приложения

      Моделирование системы в данном проекте будет осуществляться с помощью языка UML. Моделирование системы предполагает идентификацию сущностей, важных с той или иной точки зрения. Эти сущности составляют словарь моделируемой системы. В языке UML все сущности моделируются как классы. Класс – это абстракция сущностей, являющихся частью нашего словаря. Класс представляет не индивидуальный объект, а целую их совокупность. Чтобы изобразить систему с какой-либо точки зрения средствами UML, для организации представляющих интерес элементов используются диаграммы. В UML определено девять типов диаграмм, которые позволено комбинировать для создания нужного вида. Например, статические аспекты вида с точки зрения реализации системы удобнее визуализировать с помощью диаграмм компонентов, а динамические аспекты того же вида - с помощью диаграмм взаимодействия. Статические аспекты системной базы данных можно изобразить с помощью диаграмм классов, а динамические - с помощью диаграмм кооперации. 
      Диаграмма вариантов использования (use case diagram) описывает функциональное назначение системы или, другими словами, то, что система будет делать в процессе своего функционирования. Суть данной диаграммы состоит в следующем: проектируемая система представляется в виде множества сущностей или актеров, взаимодействующих с системой с помощью, так называемых вариантов использования. При этом актером (actor) или действующим лицом называется любая сущность, взаимодействующая с системой извне.
      Представленный программный продукт реализует следующие основные функции и действия:
 просмотр карты;
 построение маршрутов;
 добавление, удаление, обновление данных о сенсорах;
 изменение карты сенсоров.
      

      
      Рисунок 2.3- Диаграмма вариантов использования
      
      Диаграмма классов – основная для создания кода приложения. Для удобства представления я разбил диаграмму классов, на слои, которые они из себя представляют. По той причине, что спроектированных классов получилось более 33 и если разместить их на одной диаграмме классов, то она получилось бы слишком большой и запутанной.
      В первую очередь спроектируем диаграмму классов – сущностей. Основных объектов, с которыми программе предстоит работать.
      


Рисунок 2.4 – Диаграмма сущностей

      На диаграмме есть такие классы как Sensor, Edge, SensorDescription и другие. Sensor - это основной класс проектируемой программы. В виду того что он содержит в себе всю основную информацию об реальном сенсоре его положение и координаты. Имеет параметр description, типа SensorDescription. В атрибуте данного типа хранится информация об уровне загрязненности по всем необходимым системе параметрам таким как CO, CO^2,CH^4, о концентрации группы LPG газов (пропан, бутан, изобутан и другие), о содержании пыли в атмосфере, давлении воздуха, температуре и так далее.
      Спроектируем диаграмму классов, отвечающую за работу приложения с базой данных.
Диаграмма классов слоя репозитория вынескена в Приложение А
       Данные классы проектируются для преобразования классов-сущностей в данные, хранящиеся в базе данный и наоборот. Также эти классы отвечают за все запросы к базе данных, выборке данных их обработке и преобразованию в объекты классов-сущностей, описанных выше.
      Спроектируем диаграмму классов, отвечающую за обработку запросов, приходящих с сервера. 
      

      
      Рисунок 2.5 – Диаграмма слоя контроллеров
      
      Эти классы ответственны за преобразование данных, полученных от пользователя. И предоставления обработанных данных пользователю посредством подготовленных Freemarker-ом страниц.
      Спроектируем диаграмму классов, ответственных за обработку пользовательских данных и проверки их на валидность, также этот слой занимается логированием ошибок с последующей обработкой исключительных ситуаций.
Диаграмма слоя сервисов вынесена в приложения А
      Спроектируем диаграмму классов, исключительных ситуаций, которые делаются для предоставления возможности обработки исключительных ситуаций, которые могут возникнуть в процессе работы приложения.
      
      
Рисунок 2.8 - Диаграмма классов исключений

      Спроектируем диаграмму классов, которые отвечают за конфигурацию всего приложения в целом. Данные классы будут являться вспомогательными для построения контекста приложения.
      
      
      Рисунок 2.9 – Диаграмма классов конфигураций
     
      Диаграмма последовательности (Sequence diagram) является диаграммой взаимодействия, отражающей поток событий, происходящих при реализации некоторого варианта использования. При построении диаграммы последовательности в первую очередь отображается временная последовательность происходящих событий. На этой диаграмме изображаются действующие лица, объекты, а также передаваемые сообщения между ними. У каждого объекта имеется линия жизни, изображаемая в виде вертикальной штриховой линии под объектом. Последовательность сообщений и действий состоит в том, что один объект передает другому объекту некоторое сообщение, которое вызывает определенное действие. Затем второй объект в результате произошедшего события может передать сообщение следующему объекту и т.д.
      Примечание диаграмма последовательности будет располагаться в приложении Б.
      
 Проектирование структуры базы данных 
      
      Для проектирования базы данных рассмотрим язык SQL – он представляет собой декларативный язык структурных запросов, применяется для создания, модификации и управления данными в реляционных базах данных, управляемых соответствующей системой управления базами данных. 
      Информационная модель системы была получена путем привидения от 1-ой к 3-eй нормальной форме.
      Первая нормальная форма. Сущность находится в первой нормальной форме, если все атрибуты являются простыми (атомарными, неделимыми – т.е. невозможно дальнейшее разделение без потери смысла) и среди атрибутов отсутствуют повторяющиеся группы. Также, не допускается хранить в одном атрибуте разные по смыслу значения. Для данной модели все эти условия выполняются, следовательно, она находится в первой нормальной форме. 
      Вторая нормальная форма. Сущность, имеющая простой первичный ключ (т.е. состоящий из одного атрибута) и находящаяся в первой нормальной форме, автоматически находится и во второй нормальной форме. В модели нет составных ключей, и она находится в первой нормальной форме, значит, она автоматически находится во второй нормальной форме.
      Третья нормальная форма. Сущность находится в третьей нормальной форме, если она находится во второй нормальной форме, и отсутствуют функциональные зависимости между не ключевыми атрибутами.
      Выделим следующие сущности:
      “sensor”.
      Ключевое поле “id”- порядковый номер сенсора в базе данных.
      Не ключевые поля:
 ”name”- название сенсора или места его расположения;
 “latitude” – широта местоположения сенсора;
 “longitude” – долота местоположения сенсора.
      Таблица сенсор будет основной в данной программе она будет описывать местоположение реального сенсора. Значение широты показывает значение относительно начального меридиана и записывается со значением + если сенсор располагается севернее линии экватора – если южнее. Значение долготы описывает то в каком полушарии находится сенсор относительно нулевого меридиана, записывается со значением + если сенсор находится в восточном полушарии и со значением – если сенсор располагается в западном полушарии. Может принимать диапазон значений 0 – 180.
“sensor_description”.
Ключевое поле “sensor_id” – ссылка на конкретный сенсор
Не ключевые поля:
 “co2” – значение загрязнение газа ?СО?^2  в ?мкг/м?^3
 “lpg” – значение загрязнение газа группы сжиженных газов в ?мкг/м?^3
 “co” – значение загрязнение газа СО в ?мкг/м?^3
 “ch4” – значение загрязнение газа ?СH?^4  в ?мкг/м?^3
 “dust” – значение запыленности воздуха в ?мкг/м?^3
 “temp” – значение температуры в С^о
 “hum” – значение уровня шума в Дб
 “pressure” – значение давления воздуха в Па
 “created” – дата последнего обновления данных
      Данная таблица будет использоваться не только проектируемым приложением, и ее структура была выдана вместе с техническим заданием, но она описывает конкретные показания датчиков по каждому интересующему нас пункту, показывает уровень загрязнения по рассматриваемым загрязняющим веществам, также для удобства прогнозирования распространения газов сенсор может отмечать следующие показатели: температура окружающего воздуха и его давление, значение уровня шума и дату обновление данных. 
      Edge
Ключевое поле “id” – номер ребра для построения графа
Не ключевые поля:
 first_sensor_id – ссылка на первые сенсор;
 second_sensor_id – ссылка на второй сенсор.
      Проектируемая таблица будет являться вспомогательной она позволит определить наличие пути между двумя точками графа. В общем смысле для построения графа нам необходимо какое-то количество связанных между собой точек. Связь между двумя точками называется ребром графа. Проектируемая таблица описывает ребра графа, что позволит в последствии построить граф точек.

      
Рисунок 2.2 - Диаграмма базы данных

      2.7 	Вывод к разделу

      В данном разделе была проведена работа по анализу особенностей проектируемой системы. Также по анализу требований к системе. Проанализировали необходимость критерии оптимальности при проектировании алгоритма. Рассмотрели нормативно правовую основу в виде постановление Министерства здравоохранения РБ в котором прописан основной гигиенический норматив. Рассмотрели предельно допустимые концентрации вредных веществ, с которыми предстоит работать сенсорам.
      Сформулировали принципы построения маршрута по точкам графа. Модифицировали алгоритм Дейкстры, что позволило помимо расчета стоимости прохождения от одной точки до всех остальных в графе рассчитывать еще и пути прохождения маршрута. Что позволит строить маршрут в графе точек и знать стоимость прохождение по этому маршруту.
      Спроектировали диаграммы на основе которых будет производиться последующая разработка приложения. Спроектировали диаграммы классов, вариантов использования, последовательности и другие. Спроектировали основные классы, которые будут реализовывать поставленные задачи. Разработали деление классов на слои, что позволило упростить понимание того, что происходит в программе. Данное решение поможет даже человеку, не имеющему никакого отношения к программированию достаточно быстро разобраться в границах ответственности каждого из слоев приложения. Также в процессе написания раздела была спроектирована база данных, отвечающая за хранение основных данных приложения.


     3 РАЗРАБОТКА ПРИЛОЖЕНИЯ
     
      3.1 Выбор языка программирования
     
      Для написания програмного средства был выбран язык Java — сильно типизированный объектно-ориентированный язык программирования, разработанный компанией Sun Microsystems в последующем приобретённой компанией Oracle. 
      
      3.2 Выбор базы данных
      
      Система управления базами данных (СУБД) — совокупность программных и лингвистических средств общего или специального назначения, обеспечивающих управление созданием и использованием баз данных. [26]
      Классификации СУБД: 
 По модели данных
      Примеры:
 Иерархические;
 Сетевые;
 Реляционные;
 Объектно-ориентированные.
По степени распределённости:
 Локальные СУБД (все части локальной СУБД размещаются на одном компьютере)
 Распределённые СУБД (части СУБД могут размещаться на двух и более компьютерах).
По способу доступа к БД:
      Файл-серверные
      В файл-серверных СУБД файлы данных располагаются централизованно на файл-сервере. СУБД располагается на каждом клиентском компьютере (рабочей станции). Доступ СУБД к данным осуществляется через локальную сеть. На данный момент файл-серверные СУБД считаются устаревшими.
      Клиент-серверные
      Клиент-серверная СУБД располагается на сервере вместе с БД и осуществляет доступ к БД непосредственно, в монопольном режиме. Все клиентские запросы на обработку данных обрабатываются клиент-серверной СУБД централизованно.
      Встраиваемые
      Встраиваемая СУБД (англ. embedded DBMS)[27] — СУБД, которая может поставляться как составная часть некоторого программного продукта, не требуя процедуры самостоятельной установки. Встраиваемая СУБД предназначена для локального хранения данных своего приложения и не рассчитана на коллективное использование в сети. Физически встраиваемая СУБД чаще всего реализована в виде подключаемой библиотеки. Доступ к данным со стороны приложения может происходить через SQL либо через специальные программные интерфейсы.
      Реляционные СУБД.
      Реляционная СУБД - СУБД, управляющая реляционными базами данных.
      Примеры:
      DB2 — семейство программных продуктов в области управления информацией компании IBM.
      Чаще всего, ссылаясь на DB2, имеют в виду реляционную систему управления базами данных DB2 Universal Database (DB2 UDB), разрабатываемую и выпускаемую компанией IBM.
      Универсальный сервер баз данных DB2 Universal Database - это масштабируемая, обьектно-реляционная система управления базами данных с интегрированной поддержкой мультимедиа и Web, работающая на системах от персональных компьютеров и серверов на процессорах Intel до Unix, от однопроцессорных систем до симметричных многопроцессорных систем (SMP) и систем с массовым параллелизмом (MPP), на хостах AS/400 и мейнфреймах. DB2 Universal Database объединяет в себе высокую производительность систем обработки транзакций в режиме on-line, объектно-реляционные расширения, усовершенствованные средства оптимизации с возможностями параллельной обработки и поддержкой очень больших баз данных. DB2 Universal Database также имеет новые встроенные средства для облегчения переноса на свою базу приложений, разработанных на других системах управления базами данных, таких как Oracle, Microsoft, Sybase и Informix. Помимо этого, DB2 Universal Database включает в себя дополнительные средства поддержки систем аналитической обработки в реальном времени (OLAP) и систем поддержки принятия решений, множество простых в использовании расширений (DB2 extenders). DB2 Universal Database доступна на абсолютном большинстве ключевых платформ, что дает заказчикам ту гибкость, которая им необходима.
      Поскольку исторически DB2 развивалась с многопользовательских систем на мейнфреймах, то большое внимание в архитектуре DB2 уделяется вопросам безопасности и распределения ролей, обслуживающих DB2 специалистов. В частности, в отличие от многих других СУБД, в DB2 имеются отдельные роли для администратора СУБД (ответственного за конфигурирование программных компонентов DB2 и их оптимальное выполнение в компьютерной системе) и администратора базы данных (ответственного за управление данными в конкретной базе).
      Использование при необходимости в программах статического SQL и концепции пакетов допускает, в отличие от большинства других СУБД, реализацию такой модели безопасности, когда права на выполнение определённых операций могут выдаваться прикладным программам при отсутствии таких прав у работающих с этими программами пользователей. Это позволяет в таком случае гарантировать невозможность работы пользователя с базой данных в обход прикладной программы, если у пользователя имеются только права на запуск программы, но не на самостоятельную манипуляцию данными.
      В рамках концепции повышения уровня интеграции средств безопасности в компьютерной системе, DB2 не имеет собственных средств аутентификации пользователей, интегрируешь со средствами операционной системы или специализированными серверами безопасности. В рамках DB2 осуществляется только авторизация пользователей, аутентифицированных системой.
      MySQL— свободная система управления базами данных (СУБД). MySQL является собственностью компании Oracle Corporation, получившей её вместе с поглощённой Sun Microsystems, осуществляющей разработку и поддержку приложения. Распространяется под GNU General Public License и под собственной коммерческой лицензией, на выбор. Помимо этого, разработчики создают функциональность по заказу лицензионных пользователей, именно благодаря такому заказу почти в самых ранних версиях появился механизм репликации.
      MySQL является решением для малых и средних приложений. Входит в состав серверов WAMP, LAMP и в портативные сборки серверов Денвер, XAMPP. Обычно MySQL используется в качестве сервера, к которому обращаются локальные или удалённые клиенты, однако в дистрибутив входит библиотека внутреннего сервера, позволяющая включать MySQL в автономные программы.
      Гибкость СУБД MySQL обеспечивается поддержкой большого количества типов таблиц: пользователи могут выбрать как таблицы типа MyISAM, поддерживающие полнотекстовый поиск, так и таблицы InnoDB, поддерживающие транзакции на уровне отдельных записей. Более того, СУБД MySQL поставляется со специальным типом таблиц EXAMPLE, демонстрирующим принципы создания новых типов таблиц. Благодаря открытой архитектуре и GPL-лицензированию, в СУБД MySQL постоянно появляются новые типы таблиц. 
      Объектно-реляционные СУБД.
      Объектно-реляционная СУБД (ОРСУБД)— реляционная СУБД (РСУБД), поддерживающая некоторые технологии, реализующие объектно-ориентированный подход.
      Разница между объектно-реляционными и объектными СУБД: первые являют собой надстройку над реляционной схемой, вторые же изначально объектно-ориентированы. Главная особенность и отличие объектно-реляционных, как и объектных, СУБД от реляционных заключается в том, что О(Р)СУБД интегрированы с Объектно-Ориентированным (OO) языком программирования, внутренним или внешним как C++, Java. [27]
      Характерные свойства OРСУБД:
 комплексные данные, 
 наследование типа,  
 объектное поведение.
      Комплексные данные могут быть реализованы через постоянно-хранимые объекты (persistent objects). Создание комплексных данных в большинстве существующих ОРСУБД основано на предварительном определении схемы через определяемый пользователем тип (UDT - user-defined type). Используются также встроенные конструкторы составных типов, например массив (ARRAY).
      Иерархия структурных комплексных данных предлагает дополнительное свойство, наследование типа. То есть структурный тип может иметь подтипы, которые используют все его атрибуты и содержат дополнительные атрибуты, специфицированные в подтипе.
      Объектное поведение закладывается через описание программных объектов. Такие объекты должны быть сохраняемыми и переносимыми для обработки в базе данных, поэтому они называются обычно как постоянные (или долговременные) объекты. Внутри базы данных все отношения с постоянным программным объектом есть отношения с его объектным идентификатором (OID).
      Примеры:
      Oracle предлагает комплексные, открытые, доступные и удобные в использовании технологические решения. Готовые пакетируемые решения автоматически включают в свою стоимость базу данных, сервер приложений, интеграционную платформу, инструменты аналитики и управления неструктурированными данными. Масштабируемые бизнес-приложения Oracle могут быть легко интегрированы с ИТ-инфраструктурой предприятия без потери уже вложенных в IT инвестиций.
      СУБД Oracle Database 11g - первая СУБД, созданная как платформа для Grid-вычислений СУБД Oracle Database 11 gобеспечивает рекордные показатели производительности и масштабируемости при работе на серверах под управлением Windows, Linux и UNIX. Она гарантирует быструю окупаемость инвестиций, позволяя пользователям перейти от одиночного сервера к распределенной Grid-среде, не изменив ни одной строки кода своего приложения. СУБД Oracle Database 11gобеспечивает улучшенные характеристики за счет автоматизации задач администрирования и обеспечения лучших в отрасли возможностей по безопасности и соответствию нормативно-правовым актам в области защиты информации. С помощью технологии кластеризации серверов Real Application Clusters обеспечивается максимально возможная доступность данных. Благодаря наличию различных редакций и более низкой стоимости эксплуатации по сравнению с серверами IBM DB2 или Microsoft SQL Server, она является идеальным решением для растущих предприятий.
      PostgreSQL— свободная объектно-реляционная система управления базами данных (СУБД).
      Существует в реализациях для следующих платформ: Linux,Solaris/OpenSolaris,Win32,Mac OS X,FreeBSD,QNX4.25, QNX 6.
      Сильными сторонами PostgreSQL считаются:
 поддержка БД практически неограниченного размера;
 мощные и надёжные механизмы транзакций и репликации;
 расширяемая система встроенных языков программирования: в стандартной поставке поддерживаются PL/pgSQL, PL/Perl, PL/Python и PL/Tcl; дополнительно можно использоватьPL/Java,PL/PHP,PL/Py,PL/R,PL/Ruby,PL/SchemeиPL/sh, а также имеется поддержка загрузки C-совместимых модулей;
 наследование.
 легкая расширяемость.
      Функции являются блоками кода, исполняемыми на сервере, а не на клиенте БД. Хотя они могут писаться на чистом SQL, реализация дополнительной логики, например, условных переходов и циклов, выходит за рамки, собственно, SQL и требует использования некоторых языковых расширений.
      В PostgreSQL имеется поддержка индексов следующих типов: B-дерево, хэш, R-дерево, GiST, GIN. При необходимости можно создавать новые типы индексов.[28]
      PostgreSQL поддерживает одновременную модификацию БД несколькими пользователями с помощью механизма Multiversion Concurrency Control (MVCC)
      PostgreSQL может быть расширен пользователем для собственных нужд практически в любом аспекте. Есть возможность добавлять собственные:
 Преобразования типов,
 Типы данных,
 Домены (пользовательские типы с изначально наложенными ограничениями),
 Функции (включая агрегатные),
 Индексы,
 Операторы (включая переопределение уже существующих),
      Процедурные языки.
      Вывод: для разработки программы по теме диплома мы выбрали Postgresql в виду относительной легкости при расширяемости, возможности администрирования БД практически неограниченного размера, хорошо проработанным механизмам транзакции и репликации.
      
 Выбор средств разработки

      Для написания программного средства была выбрана IntelliJ IDEA — интегрированная среда разработки программного обеспечения для многих языков программирования, в частности Java, JavaScript, Python, разработанная компанией JetBrains.
      Первая версия появилась в январе 2001 года и быстро приобрела популярность как первая среда для Java с широким набором интегрированных инструментов для рефакторинга, которые позволяли программистам быстро реорганизовывать исходные тексты программ. Дизайн среды ориентирован на продуктивность работы программистов, позволяя сконцентрироваться на функциональных задачах, в то время как IntelliJ IDEA берёт на себя выполнение рутинных операций.
      Начиная с шестой версии продукта IntelliJ IDEA предоставляет интегрированный инструментарий для разработки графического пользовательского интерфейса. Среди прочих возможностей, среда хорошо совместима со многими популярными свободными инструментами разработчиков, такими как CVS, Subversion, Apache Ant, Maven и JUnit. В феврале 2007 года разработчики IntelliJ анонсировали раннюю версию плагина для поддержки программирования на языке Ruby.
      Начиная с версии 9.0, среда доступна в двух редакциях: Community Edition и Ultimate Edition. Community Edition является полностью свободной версией, доступной под лицензией Apache 2.0, в ней реализована полная поддержка Java SE, Kotlin, Groovy, Scala, а также интеграция с наиболее популярными системами управления версиями. В редакции Ultimate Edition, доступной под коммерческой лицензией, реализована поддержка Java EE, UML-диаграмм, подсчёт покрытия кода, а также поддержка других систем управления версиями, языков и фреймворков.
      Поддерживаемые языки: Java. JavaScript. CoffeeScript, HTML/XHTML/HAML, ,CSS/SASS/LESS, XML/XSL/XPath, YAML, ActionScript/MXML, Python, Ruby, Haxe, Groovy, Scala, SQL, PHP, Kotlin, Clojure, C, C++, Go.
      
  Описание используемых технологий 
      
   При написании программного средства были использованы следующие технологи:
 Maven
 Spring
 Hibernate
 Freemarker
 Log4j
 Flyway
      Apache Maven — технология, фреймворк разработанные с целью автоматизации сборки проектов на основе описания их структуры в файлах на языке POM (англ. Project Object Model), являющемся подмножеством XML. Проект Maven издаётся сообществом Apache Software Foundation, где формально является частью Jakarta Project.
      Название системы является словом из языка идиш, смысл которого можно примерно выразить как «собиратель знания».
      Maven обеспечивает декларативную, а не императивную (в отличие от средства автоматизации сборки Apache Ant) сборку проекта. В файлах описания проекта содержится его спецификация, а не отдельные команды выполнения. Все задачи по обработке файлов, описанные в спецификации, Maven выполняет посредством их обработки последовательностью встроенных и внешних плагинов.
      Spring Framework (или коротко Spring) — универсальный фреймворк с открытым исходным кодом для Java-платформы. 
      Первая версия была написана Родом Джонсоном, который впервые опубликовал её вместе с изданием своей книги «Expert One-on-One Java EE Design and Development» (Wrox Press, октябрь 2002 года).
      Фреймворк был впервые выпущен под лицензией Apache 2.0 license в июне 2003 года. Первая стабильная версия 1.0 была выпущена в марте 2004. Spring 2.0 был выпущен в октябре 2006, Spring 2.5 — в ноябре 2007, Spring 3.0 в декабре 2009, и Spring 3.1 в декабре 2011. Текущая версия — 5.1.2.
      Несмотря на то, что Spring не обеспечивал какую-либо конкретную модель программирования, он стал широко распространённым в Java-сообществе главным образом как альтернатива и замена модели Enterprise JavaBeans. Spring предоставляет бо?льшую свободу Java-разработчикам в проектировании; кроме того, он предоставляет хорошо документированные и лёгкие в использовании средства решения проблем, возникающих при создании приложений корпоративного масштаба.
      Между тем, особенности ядра Spring применимы в любом Java-приложении, и существует множество расширений и усовершенствований для построения веб-приложений на Java Enterprise платформе. По этим причинам Spring приобрёл большую популярность и признаётся разработчиками как стратегически важный фреймворк.
      Hibernate — самая популярная реализация спецификации JPA, предназначенная для решения задач объектно-реляционного отображения (ORM). Распространяется свободно на условиях GNU Lesser General Public License.
      Целью Hibernate является освобождение разработчика от значительного объёма сравнительно низкоуровневого программирования при работе в объектно-ориентированных средствах в реляционной базе данных. Разработчик может использовать Hibernate как в процессе проектирования системы классов и таблиц «с нуля», так и для работы с уже существующей базой данных.
      Библиотека не только решает задачу связи классов Java с таблицами базы данных (и типов данных Java с типами данных SQL), но и также предоставляет средства для автоматической генерации и обновления набора таблиц, построения запросов и обработки полученных данных и может значительно уменьшить время разработки, которое обычно тратится на ручное написание SQL- и JDBC-кода. Hibernate автоматизирует генерацию SQL-запросов и освобождает разработчика от ручной обработки результирующего набора данных и преобразования объектов, максимально облегчая перенос (портирование) приложения на любые базы данных SQL.
      FreeMarker — компилирующий обработчик шаблонов, написанный на Java, один из инструментов, позволяющих отделить логику и данные от представления в духе концепции Model-view-controller. Используется преимущественно при разработке web-приложений с использованием Java-сервлетов, также может использоваться для вывода текста в других случаях: генерация CSS, исходного кода Java и т. д. В отличие от JSP FreeMarker не является зависимым от архитектуры сервлета или от протокола HTTP. Таким образом шаблонизатор может использоваться не только в web-проектах. FreeMarker является свободным ПО.
      Log4j — библиотека журналирования Java программ, часть общего проекта «Apache Logging Project».
      Log4j первоначально развивался в рамках зонтичного «Apache Jakarta Project», ответственного за все Java-проекты Apache, но впоследствии выделился в отдельный, очень популярный проект журналирования.
      
 Руководство пользователя

      Для начала работы с приложением необходимо зайти на главную страницы приложения от лица пользователя. 
      Для того, чтобы построить маршрут пользователь зайдя на главную страницу приложения пользователь должен выбрать 2 точки. После чего выбрать необходимый ему критерий расстояния, уровня чистоты маршрута, среднее между чистотой и длительностью маршрута. После выбора критерия необходимо нажать клавишу рассчитать
      

      
      Рисунок 3.1 – Часть пользовательского интерфейса главной страницы приложения
      
      После чего если нажать кнопу рассчитать, то программ построит маршрут из одной точки в другую по заданному критерию выбора
      

      
      Рисунок 3.2 – Поиск заданному критерию
      
      Также пользователю предоставляется возможность изменять критерий построения маршрута
      


      Рисунок 3.3 – Изменение критерия построения маршрута
      
      При изменении критерия построения маршрута и нажатии клавиши рассчитать программа пересчитывает маршрут


      Рисунок 3.4 – Построение маршрута по измененному критерию.


      
      Рисунок 3.5 – Авторизация в системе.
      
      После авторизации в системе пользователю доступен новые действия, а именно редактирование данных сенсоров, добавление и удаление сенсоров.Действия необходимые для редактирования сенсоров открыть страницу сенсоров и нажать на конкретный сенсор. 
      


      Рисунок 3.6 – Выбор сенсора для редактирования
      
      После чего в выпавшем диалоговом окне выбрать клавишу изменить

      
      Рисунок 3.7 – Редактирования показателей сенсора
      После чего нажимаем клавишу обновить и выбираем редактированных сенсор
      


      Рисунок 3.8 – Просмотр редактированных показателей сенсора
      
      Видим, что данные были измены. 
      Рассмотрим последовательность действий необходимых для удаления сенсора из системы. Для этого нам понадобится выбрать сенсор и нажать клавишу изменить.
      


      Рисунок 3.9 – Удаление сенсора
      Нажав клавишу удалить, страница будет обновлена и можно увидеть, что на карте отсутствует ранее удаленный сенсор.
      

      
      Рисунок 3.9 – Просмотр карты сенсоров (удаление сенсор)
      
      Добавление сенсора. Выбираем местоположение сенсора на карте. После чего откроется диалоговое окно, в котором необходимо ввести данные по каждому пункту загрязнения. Модальное окно на рисунке (3.10)
      
      
      Рисунок 3.10 – Создание записи о сенсоре.
      Добавив запись о сенсоре, страница будет обновлена и можно увидеть, что на карте сенсоров появился новый сенсор.
      


      Рисунок 3.11 – Просмотр карты сенсоров (создание сенсора)
      
      
 Вывод к разделу

      В данной главе была проделана достаточно большая работа в роли разработчика программного обеспечения. Что позволит стать профессиональнее в выбранной области. В данной главе мы выбрали язык программирования, который позволит выполнить поставленные задачи и реализовать приложение. Разработали легко масштабируемое и достаточно легковесное программное обеспечение на языке Java. Что позволит использовать данное приложение на любой операционной системе, поддерживающей JVM
      Определились с базой данных, сравнив ее с аналогами. Реализовали программное средство с помощью базы данных Postgres. Реализовали поставленные задачи посредством выбранного языка программирования в совокупности большим перечнем фремворков и библиотек. Это позволило углубить понимание объектно- ориентированного программирования также изучить новые технологии и применить их на практике тем самым закрепить изученный материал.


4 ИСПЫТАНИЕ ПРИЛОЖЕНИЯ

4.1 Принципы тестирования

      Тестирование программного обеспечения — процесс исследования, испытания программного продукта, имеющий своей целью проверку соответствия между реальным поведением программы и её ожидаемым поведением на конечном наборе тестов, выбранных определенным образом (ISO/IEC TR 19759:2005).
По объекту тестирования:
 Функциональное тестирование;
 Тестирование производительности;
 Конфигурационное тестирование;
 Юзабилити-тестирование;
 Тестирование безопасности;
 Тестирование локализации;
 Тестирование совместимости.
По знанию внутреннего строения системы:
 Тестирование чёрного ящика;
 Тестирование белого ящика;
 Тестирование серого ящика.
По степени автоматизации:
 Ручное тестирование;
 Автоматизированное тестирование
 Полу-автоматизированное тестирование;
 По степени изолированности;
 Тестирование компонентов;
 Интеграционное тестирование;
 Системное тестирование.
      Для тестирования нашего приложения мы будем использовать следующие виды тестирования: 
      Автоматическое тестирование путем написания классов, тестирующих приложение. При прохождении каждого теста моделируется вызов какой-либо функции у тестируемого объекта и производится сравнивание полученного результата с заранее подготовленным. \
      Ручное тестирование – производится без помощи сторонних библиотек или фреймворков, силами тестировщика в роли пользователя системы.
      Тестирование черного ящика – подразумевает собой то, что тестировщик не имеет никакого понятия об коде программы и пользуется приложением как обычный пользователь, данный подход будет использоваться при ручном тестировании, при этом тестировщик выступает в роли пользователя. То есть тестировщик должен вести себя как самый обычный пользователь, не имеющий никакого понятия как работает приложение. 
       Тестирование белого ящика – подразумевает собой то, что тестировщик имеет доступ к коду приложение, хорошо его понимает и может составить тестовое покрытие данного кода, будет использоваться при автоматическом тестировании, для написания тестов необходимо знать внутреннюю структуру приложения.
      Тестирование компонентов – подразумевает тестирование основных компонентов программы, то есть тестировать каждый метод по поддельности и каждый слой приложение необходимо протестировать независимо от других слоев, для избегания ошибок, которые могут возникнуть независимо от тестируемого слоя приложения.
      
4.2 Использованные библиотеки и фреймворки

H2 — открытая кроссплатформенная СУБД, полностью написанная на языке Java.
      Данная СУБД создается памяти JVM при старте приложения, что позволяет поднимать базу данных быстрее чем обычные так как никакого обращение к удаленному серверу не происходит. Это позволяет пред каждым прохождением теста сначала поднимать и настраивать базу данных с помощью изначально заготовленных скриптов. 
      JUnit — библиотека для модульного тестирования программного обеспечения на языке Java.
      Был создан Кентом Беком и Эриком Гаммой. Относится к семье фреймворков xUnit для различных языков программирования. Имеет большое множество расширений и породил такие экосистемы как – Jmock, EasyMock, DbUnit, HttpUnit и тд
      Junit портирован на многие языки среди которых и такие языки как:  PHP, C#, Python , Fortran , Delphi , Free Pascal , Perl , C++ , Flex, JavaScript, COS .
      Mockito – фреймворк с открытым исходным кодом разработанный для тестирования приложений посредством создания заглушек определенных объектов. Этот фреймворк позволяет тестировать слои приложения независимо друг от друга.
      Flyway – инструмент с открытым исходным кодом необходимый для версионирования базы данных. Что позволяет поддерживать необходимую версию базы данных.
      
      
4.3 Модульное тестирование 
      
      Для тестирования репозитория мы выбрали методологию DDT (Data Driven Testing)- подход к созданию/архитектуре автоматизированных тестов (юнит, интеграционных, чаще всего применимо к backend тестированию), при котором тест умеет принимать набор входных параметров, и эталонный результат или эталонное состояние, с которым он должен сравнить результат, полученный в ходе прогонки входных параметров. Такое сравнение и есть assert такого теста. Притом, как часть входных параметров, могут передаваться опции выполнения теста, или флаги, которые влияют на его логику. 



Рисунок 4.1 – Схема тестирования Data Driven Testing

      Согласно данной методологии при подготовке класса к тестированию создается какой- либо эталонный результат, который заведомо правильный. 
Для примера тестирования рассмотрим тестирования репозитория сенсоров.
      @Before 
public void setUp() { 
TestCollections testCollections = new TestCollections(); 
sensorList = testCollections.getSensorList(); 
testSensor = new Sensor("7", 75.7575, 54.5454); 
} 
      Для создания эталонного значения был создан класс TestCollections в котором создаются эталонные сенсоры и ребра графа. Аннотация Before означает что этот метод будет вызван перед началом каждого теста.
@Test 
public void find() { 
Sensor expected = repository.find(1).get(); 
Sensor actual = sensorList.get(0); 
Assert.assertEquals(expected, actual); } 
      В данном примере репозиторий достает сущность по id и происходит сравнение с заранее заготовленным объектом. Если объекты идентичны, то тест считается пройденным.
      Аналогичным образом протестированы все CRUD операции с каждой из сущностей. CRUD -это аббревиатура названия методов create read update delete. CRUD это стандартный перечень операций с сущностью и базой данных.

4.4 Интеграционное тестирование
      
      Сам термин интеграционное тестирование подразумевает, что какой-либо модуль тестируется не отдельно как при модульном тестировании, а в группе.
      Интеграционное тестирование в качестве входных данных использует модули, над которыми было проведено модульное тестирование, группирует их в более крупные множества, выполняет тесты.
      Целью интеграционного тестирования является проверка соответствия проектируемых единиц функциональным, приёмным и требованиям надежности. Тестирование этих проектируемых единиц — объединения, множества или группы модулей — выполняется через их интерфейс, с использованием тестирования «чёрного ящика».
      Протестируем класс, отвечающий за построение маршрута.

      
      Рисунок 4.2 – Построение чистого маршрута между двумя точками
      
      Если изменить критерий выбора на построение кратчайшего пути – тогда алгоритм будет игнорировать показания загрязнения сенсоров и просчитает самый оптимальный путь из соображений расстояния.



Рисунок 4.3 – построение кратчайшего маршрута между двумя точками
      У разработанного алгоритма есть еще один режим работы “смешенный” работающий относительно уровней загрязненности и расстояний между точками.
      

      
      Рисунок 4.4 – Построение оптимального маршрута между двумя точками
      4.5 Выводы к разделу
      
      В данном разделе мы реализовали тестирование разработанного программного средства посредством определенных технологий. Применили свои знания в области тестирования и подходах к тестированию на практике, что позволило укрепись свои представление о тестировании программного обеспечения. 
      Реализовали модульное тестирование отдельных компонентов приложения посредством подхода белого ящика. Также провели интеграционное тестирование приложения, в котором протестировали не только построение маршрута по точкам, но и работу с базой данных. Работу с пользовательским интерфейсом. В ходе тестирования приложения продемонстрировали различные подходы к построению оптимального маршрута по различным критериям выборки.


5  ТЕХНИКО-ЭКОНОМИЧЕСКОЕ ОБОСНОВАНИЕ

      5.1 Краткая характеристика разрабатываемого сайта
      	
      Целью данного дипломного проекта является написание программного средства для построение оптимального маршрута в условиях загрязнения окружающей среды, способного в полной мере упростить и повысить эффективность в данной области.
      Web-проект — это определённая последовательность задач, направленная на достижение конкретных целей в течение заданного периода времени, с установленными требованиями к качеству результатов и возможными рамками расхода ресурсов. Разрабатываемый программный продукт должен быть выгодным не только функционально, но и экономически. 

    5.2 Расчет себестоимости и цены программного продукта
    
    Для проведения технико-экономического обоснования разработки программного продукта необходимо определить его стоимостную оценку.
    Стоимостная оценка программы у разработчика предполагает составление сметы затрат, которая включает следующие статьи расходов:
     затраты на оплату труда (основная и дополнительная заработную плату) исполнителей; 
     отчисления на социальные нужды;
     материалы и комплектующие изделия;
     расходы на научные командировки;
     прочие прямые расходы;
     накладные расходы.
    На основании сметы определяется себестоимость и отпускная цена программного продукта.
    Результаты расчета основной и дополнительной заработной платы разработчиков программного продукта, а также отчислений на социальные приведены в таблице 5.1.  
    Раcходы по статье “Материалы и комплектующие изделия” (М) определяются на основании сметы затрат, разрабатываемой на программный продукт с учетом действующих нормативов. По статье “Материалы и комплектующие изделия” отражаются расходы на внешние запоминающие устройства, бумагу, картриджи и другие материалы, необходимые для разработки продукта. Сумма затрат на расходные материалы определяются по нормативу в процентах к фонду заработной платы разработчиков (H_мз), который устанавливается организацией (3-5%) и рассчитывается по формуле 5.1:
    
M=(З_O?H_МЗ)/100=14.47(5.1)    
    где НМЗ– норма расхода материалов от основной заработной платы, %.
    
    Расходы по статье “Научные командировки” (РНК) на конкретное ПО определяются по нормативу (НРНК =10%), в процентах к основной заработной плате (формула 5.2):
    
Р_НК=(З_O?H_РНК)/100=36,17(5.2)    
    где НРНК – норматив расходов на командировки в целом по организации, %.
    
    Расходы по статье “Прочие прямые расходы” (ПЗ) на конкретное программное обеспечение включают затраты на приобретение и подготовку специальной научно-технической информации и специальной литературы. Определяются по нормативу (Нпз = 20%), в процентах к основной заработной плате (формула 5.3):
    
П_З=(З_O?H_ПЗ)/100=72,35(5.3)    где Нпз – норматив прочих затрат в целом по организации, %.
    
    Затраты по статье “Накладные расходы” (РМ), связанные с необходимостью содержания аппарата управления, вспомогательных хозяйств и опытных (экспериментальных) производств, а также с расходами на общехозяйственные нужды (РН), относятся на конкретный программный продукт по нормативу (НРН) в процентном отношении к основной заработной плате исполнителей. Норматив устанавливается в целом по организации и составляет 100% (формула 5.4):
    
Р_Н=(З_O?H_РН)/100=361",73" (5.4)    
    где РН – накладные расходы на конкретный программный продукт, руб.;
         НРН – норматив накладных расходов в целом по организации.
    
    Общая сумма расходов по всем статьям сметы (СП) на программу рассчитывается по формуле (формула 5.5):
    
С_П=ЗОТ+ОСН+М+Р_НК+П_З+Р_Н=971,59(5.5)    
    
    Далее необходимо определить прогнозируемую цену программного продукта. Рентабельность и прибыль по создаваемому продукту определяется исходя из результата анализа рыночных условий, переговоров с заказчиком и согласования с ним отпускной цены. 
    Организация-разработчик участвует в освоении программного продукта и несет соответствующие затраты, на которые составляется смета, оплачиваемая заказчиком по договору. Сметой предусматриваются не только затраты (основная и дополнительная зарплата, начисления на зарплату и т.д.), но и налоги, предусмотренные законодательством, и прибыль организации-разработчика. Для упрощения расчетов до составления сметы, затраты на освоение определяются по нормативу (НО=10%) от себестоимости продукта в расчете на 3 месяца и рассчитываются по формуле 5.6:
    
Р_О=(С_П?H_О)/100=97,16(5.6)    
    
    где НО – норматив расходов на освоение, %.
    
    Кроме того, организация-разработчик осуществляет затраты на сопровождение ПО (РС), которые определяются по нормативу (НС = 20%) (формула 5.7):
    
    
Р_C=(С_П?H_C)/100=194,32(5.7)    
    где НС – норматив расходов на освоение, %. 
    
    Общая сумма расходов на разработку (с затратами на освоение и сопровождение) как полная себестоимость программного продукта (СПП) определяется по формуле 5.8:
    
    
?С_П?_П=С_П+Р_О+Р_С=1263,07(5.8)

      Таблица 5.1- Расчет основной заработной платы персонала
Катего-
рия работни-
ковКол-во, челТари-фный коэф-тМесяч-
ная
тарифная ставка соотв. разряда
Дневная тарифная ставка



Плановый фонд рабочего времени
ФпОплата за отработа-нное время одного работни-каОсновная заработная плата одного работника с учетом премии12345678Программист12,65
289.38
13.78
21
289,38361.73
      Итого361,73

Таблица 5.2- Расчет себестоимости программного продукта
Наименование статьи затратУсловн6ое обозначениеЗначение,руб.ПримечаниеЗатраты на оплату труда В т.ч.
ЗОТ

361.73

ЗОТ = Зо + Зд
Отчисления на социальные нужды
         Зо
125,16

Зо=ФСЗН+БГСОтчисления в БелгосстрахБГС2,17
БГС=ЗОТ*НбгсМатериалы и комплектующиеМ14.47
М = ЗОТ*НмзНаучные командировкиРнк36,17
Рнк=ЗОТ*НрнкПрочие прямые расходыПз72,35
Пз = ЗОТ*Нпз
Продолжение таблицы 5.2 - Расчет себестоимости программного продукта
Накладные расходыРн361,73
Рн = ЗОТ*НрнОбщая сумма расходовСп
971,59
Сп= = ЗОТ + Зо +М +Рнк + Пз +Рн
      Прибыль необходимо определить в соответствии с запланированной нормой рентабельности по формуле (5.9):
      
"П = "  (С_П?Р_П)/100=193,32(5.9)      
      где Рп – уровень рентабельности, % (в пределах 15-40 %).
      Налог на добавленную стоимость, включаемый в цену, определяется по формуле 5.10:
      
"НДС = "  ((С_П+П)?S_НДС)/100=291,48(5.10)      где Sндс – ставка налога на добавленную стоимость, % (для организаций электросвязи 25%, для других организаций - 20%).
      В случае возможности коммерческой реализации проекта необходимо рассчитать его стоимость. Цена рассчитывается по формуле 5.11:
      
"Цотп = Сп+П+НДС "=" 1457,39" (5.11)
      Вывод: в ходе расчетов было получено, что общая сумма расходов составит 971,59 руб. Затраты на зарплату работникам составят 361.73 руб. Итоговая отпускная цена продукта составляет "1457,39" руб. 

 


     6 ОХРАНА ТРУДА И ТЕХНИКА БЕЗОПАСНОСТИ НА ПРЕДПРИЯТИИ
      6.1 Организация системы управления охраной труда в академии связи в соответствии с «Гигиеническим нормативом о содержания загрязняющих химических веществ в атмосферном воздухе, обладающих эффектом суммации»
      
      Разработанный программный продукт для построения оптимального маршрута в условиях загрязнения окружающей среды. Подразумевает работу в данных условиях. Сенсоры, находящиеся на некотором удалении, друг от друга позволяют построить граф, по которому и будет построен маршрут.
      Основной нормативный документ, согласно которому производятся работы с сенсорами в условии загрязнения окружающей среды называется «Гигиенический норматив содержания загрязняющих химических веществ в атмосферном воздухе, обладающих эффектом суммации». Это утвержденное постановление Министерства здравоохранения Республики Беларусь от 30.03.2015 № 33.
      Данный норматив устанавливает величины предельно допустимых концентраций (далее – ПДК), ориентировочных безопасных уровней воздействия (далее – ОБУВ) загрязняющих веществ в атмосферном воздухе населенных пунктов и мест отдыха населения, обладающих эффектом суммации. Норматив используется в целях охраны атмосферного воздуха, профилактики неблагоприятного воздействия загрязняющих веществ на здоровье населения в населенных пунктах и местах отдыха населения.
      Основой настоящего Гигиенического норматива являются комплексные токсиколого-гигиенические и эпидемиологические исследования с учетом международного опыта проведения данных исследований.
      На работодателя возлагается непосредственная ответственность и обязанность по обеспечению безопасных условий и охраны здоровья работников в организации. Организующим звеном при внедрении и функционировании системы управления охраной труда является служба охраны труда или специалист по охране труда. Успешная деятельность системы управления охраной труда в первую очередь зависит от профессионализма руководителей и специалистов в области охраны труда.
      Ответственность за охрану труда возлагается на руководителей подразделений филиала. Политику в области ОТ в Академии Связи разрабатывает проректор совместно с ведущим инженером по охране труда. Инженера по ОТ оказывают методическую и консультационную помощь в разработке и последующей корректировке политик академии в области ОТ. Проведение организационной и методологической работы по вопросам управления охраны труда, подготовку управленческих решений и контроль за их реализацией осуществляют инженеры по охране труда.
      Целями политики в области ОТ является:
      Политика по охране труда должна включать, как минимум, следующие ключевые принципы и цели, осуществление которых организация принимает на себя: 
 обеспечение безопасности и охрану здоровья всех членов организации путем предупреждения связанных с работой травм, ухудшений здоровья, болезней и инцидентов; 
 соблюдение соответствующих национальных законов и правил по охране труда, добровольных программ, коллективных соглашений по охране труда и других требований, которые организация обязалась выполнять; 
 гарантированное обеспечение того, что с рабочими и их представителями проводятся консультации, и они привлекаются к активному участию во всех элементах системы управления охраной труда; и 
 непрерывное совершенствование функционирования системы управления охраной труда. Система управления охраной труда должна быть совместима или объединена с другими системами управления в организации.
 Основные задачи в области охраны труда:
 Установление оптимальных соотношений между факторами производственной среды. Это позволяет при данном уровне техники и технологии снизить неблагоприятное воздействие производственных факторов на работника.
 Установление определенных норм, допустимых значений каждого из неблагоприятных факторов, законодательное закрепление этих норм и контроль за их выполнением.
 Обеспечение безопасности выполнения работ как для исполнителя, так и для окружающих.
 Разработка конкретных мероприятий по оздоровлению условия труда.
 Использование рациональных технических средств защиты работающих от влияния неблагоприятных факторов.
 Разработка методов оценки эффективности планируемых и проведенных мероприятий по оздоровлению условий труда.
      Система управления охраной труда, разработанная в соответствии с требованиями СТБ 18001-2009, распространяется на производственную деятельность филиала применительно к оказанию услуг электросвязи, внедрена, поддерживается в рабочем состоянии и постоянно совершенствуется.
      Требования системы управления охраной труда являются обязательными для исполнения всеми структурными подразделениями филиала.
      Система управления охраной труда предприятия применяется для:
 устранения или минимизации рисков для работающих и других заинтересованных сторон, которые могут подвергаться опасностям в области охраны труда, связанным с деятельностью организации;
 повышения результативности в управлении рисками в области охраны труда, демонстрирования соответствия обязательствам по предупреждению несчастных случаев на производстве, снижению риска профессиональных заболеваний;
 демонстрирования соответствия установленной политике предприятия в области охраны труда, требованиям СТБ 18001-2009, других законодательных и технических нормативных правовых актов по охране труда, распространяющихся на производственную деятельность организации и обязательных к исполнению;
 демонстрирования обязательства по постоянному улучшению СУОТ.
      6.2 Идентификация и анализ вредных и опасных факторов

      Для создания нормальных условий труда необходимо обеспечить необходимую чистоту воздуха. Вследствие производственной деятельности в воздушную среду помещений могут поступать разнообразные вредные вещества, которые используются в технологических процессах. 
       Опасные и вредные производственные факторы производственной среды по источнику своего происхождения подразделяют на:
 природные (включая климатические и погодные условия на рабочем месте);
 технико-технологические;
 эргономические (то есть связанные с физиологией организма человека).
       Опасные и вредные производственные факторы производственной среды по природе их воздействия на организм работающего человека подразделяют на:
 Факторы, воздействие которых носит физическую природу;
 Факторы, воздействие которых носит химическую природу;
 Факторы, воздействие которых носит биологическую природу.
 Факторы, воздействие которых носит психофизиологическую природу
      
      Физические факторы — движущиеся машины и механизмы, повышенные уровни шума и вибрации, электромагнитных и ионизирующих излучений, недостаточная освещенность, повышенный уровень статического электричества, повышенное значение напряжения в электрической цепи и др.
      Химические факторы - вещества и соединения, различные по агрегатному состоянию и обладающие токсическим, раздражающим, канцерогенным и мутагенным действиями на организм человека и влияющие на его репродуктивную функцию. Они обнаружены в аккумуляторных помещениях зданий АТС
      Биологические факторы - патогенные микроорганизмы (бактерии, вирусы, риккетсии, спирохеты) и продукты их жизнедеятельности, а также животные и растения. Их на предприятии не обнаружено.
       Психофизиологические факторы — факторы трудового процесса. К ним относятся физические (статические и динамические перегрузки) и нервно-психические перегрузки (умственное перенапряжение, перенапряжение анализаторов, монотонность труда, эмоциональные перегрузки). Этот фактор есть на всех рабочих местах, за компьютером и он является самым распространенным.
      Повышенные уровни локальной вибрации возникают в сборочных цехах при сверлении, шлифовании, шабрении, обрубке, опиливании, зачистке, правке листовых и маложестких деталей, при очистке и промывке деталей и т.д.
      Источниками повышенного значения напряжения электрического тока и повышенного уровня электромагнитных излучений являются токоведущие части действующих электроустановок.
      Предупреждение опасного влияния психофизиологических факторов достигается мерами сокращения и ликвидации тяжелого физического труда на основе применения комплексной механизации и автоматизации производственных процессов, нормализации режима труда и отдыха, оздоровления внешней среды на рабочих местах, общими мерами по снижению утомляемости и монотонности труда.
      Оценка условий работы
      При проведении аттестации не оценивается риск от воздействия опасных и вредных производственных факторов таких как:
      – движущиеся машины и механизмы;
      – подвижные части производственного оборудования;
      – передвигающиеся изделия, заготовки, материалы;
      – разрушающиеся конструкции;
      – обрушивающиеся породы;
      – расположение рабочего места на значительной высоте относительно поверхности земли (пола);
      – повышенное значение напряжения в электрической цепи, замыкание которой может произойти через тело человека;
      – острые кромки, заусенцы и шероховатость на поверхностях заготовок, инструментов и оборудования;
      – повышенная или пониженная температура поверхностей оборудования, материалов;
      – и другие.
      6.3 Организационные, технологические и иные решения по устранению опасных и вредных факторов

      При работе с вредными химическими соединениями необходимо постоянно проводится технические, санитарно-гигиенические, организационные и другие мероприятия по охране труда, направленные на обеспечение требований безопасности и гигиены труда, доведение санитарно-бытового обеспечения работников до установленных норм, осуществляемые нанимателем в плановом порядке, включаются в план мероприятий по охране труда.
      Основной целью мероприятий по охране труда являются сохранение жизни и здоровья работников в процессе трудовой деятельности.  
      Мероприятия предусматривают решение следующих задач: 
       устранение (снижение) профессиональных рисков, улучшение охраны и условий труда;
       сокращение численности работников, занятых в опасных и вредных условиях труда тяжелым физическим трудом;
       доведение обеспеченности работников санитарно-бытовыми помещениями до установленных норм, оснащение их необходимыми устройствами и средствами;
       обеспечение в установленном порядке обучения, инструктажа и проверки знаний работников по вопросам охраны труда.
      Рассмотрим некоторые мероприятия, которые позволят оптимизировать условия труда складских работников. Для создания оптимальных метеорологических условий в производственных помещениях необходимо:
       усовершенствование технологических процессов и оборудования. Внедрение новых технологий и оборудования, не связанных с необходимостью проведения работ в условиях интенсивного нагрева, даст возможность уменьшить выделение тепла в производственные помещения;
       рациональное размещение технологического оборудования. Основные источники тепла желательно размещать непосредственно под аэрационным фонарем около внешних стен здания и в один ряд на таком расстоянии друг от друга, чтобы тепловые потоки от них не перекрещивались на рабочих местах; 
       автоматизация и дистанционное управление технологическими процессами позволяют во многих случаях вывести человека из производственных зон, где действуют неблагоприятные факторы;
       рациональная вентиляция, отопление и кондиционирование воздуха. 
       использование средств индивидуальной защиты;
       применение теплоизоляции, оборудования и защитных экранов. В качестве химизоляционных материалов широко используют: асбест, асбоцемент, минеральную вату, стеклоткань, керамзит, пенопласт.
      Также важное значение имеет использование средств индивидуальной защиты. Комфортными условиями для организации работы в складских помещениях  будут являться: температура воздуха на рабочем месте в помещении в теплый период - 18-22  градусов, в холодное период - 20-22, на открытом воздухе в теплый период - 18-22, на открытом воздухе в холодный период - 7-10. Относительная влажность воздуха - 40-54 %, скорость движения воздуха, м/с: менее 0,2.
      Для создания защиты от производственной пыли и вредных химических веществ в производственных помещениях необходимо:
       изъятие вредных веществ из технологических процессов, замена вредных веществ менее вредными и т. п.;
       автоматизация и дистанционное управление технологическими процессами и оборудованием, исключающие непосредственный контакт работающих с вредными веществами;
       герметизация производственного оборудования, работа технологического оборудования в вентилируемых укрытиях, локализация вредных выделений за счет местной вентиляции, аспирационных установок;
       предварительные и периодические медицинские осмотры работающих во вредных условиях, профилактическое питание, соблюдение правил личной гигиены;
       контроль за содержанием вредных веществ в воздухе рабочей зоны
 6.4 Вредные химические вещества

6.4.1 Фактические значения загрязняющих веществ на рабочих местах. 
      Химические вещества могут находиться в твердом, пастообразном, порошкообразном, жидком, парообразном, газообразном, аэрозольном состояниях, в том числе нано размеров.
      Сенсоры, работающие в условиях загрязнения окружающей среды вынуждены контактировать с следующими вредными веществами: 
 ?CO?_2
 LPG
 CO
 ?CH?_4
 Пыль
      Анализ данных, полученных на сети мониторинга атмосферного воздуха в 2018 г., показал, что средние за год концентрации основных и специфических загрязняющих веществ в подавляющем большинстве контролируемых городов Беларуси, как и в предыдущие годы, были ниже нормативов качества. В отдельных городах зафиксированы превышения среднесуточных ПДК суммарных твердых частиц, оксида углерода и диоксида азота. Уровень загрязнения воздуха диоксидом серы сохраняется стабильно низким: как среднегодовые, так и максимальные разовые концентрации находятся существенно ниже нормативов качества. В течение 2018 г. не зафиксировано концентраций каких-либо загрязняющих веществ более 10 ПДК. Превышения максимально разовых ПДК отмечены только в 0,25% от общего количества проанализированных проб. При этом абсолютное большинство превышений составляло от 1 до 2 ПДК 
       В отдельные годы периода 2015– 2019 гг. доля проб воздуха с концентрациями загрязняющих веществ выше максимально разовой ПДК составляла от 0,25 до 0,50%. При этом от 80 до 90% превышений находились в пределах 1–2 ПДК. Концентрации загрязняющих веществ выше 5 ПДК регистрировались менее чем в 1% случаев превышений (см. табл. 2.10). Состояние атмосферного воздуха в городах Бобруйске, Гродно, Новогрудке, Светлогорске, Лиде, Солигорске и в большинстве контролируемых районов Бреста, Витебска, Минска, Гомеля, Мозыря и Пинска в 2009 г. оценивалось как стабильно.
       6.4.2 Воздействие химических загрязнений на организм человека
       Степень опасности химических веществ связана с путями их попадания в организм человека, которые подразделяют на следующие группы проникновения:
 через органы дыхания (ингаляционный путь);
 через желудочно-кишечный тракт (пероральный путь);
 через кожные покровы и слизистые оболочки (кожный путь);
 через открытые раны;
 при проникающих ранениях;
 при внутримышечных, подкожных, внутривенных инъекциях.
      По характеру результирующего химического воздействия на организм человека химические вещества подразделяют на:
 токсические (ядовитые);
 раздражающие;
 сенсибилизирующие;
 канцерогенные;
 мутагенные;
 влияющие на репродуктивную функцию.
      По составу химические вещества подразделяют на:
 индивидуальные вещества;
 смеси.
      По критерию опасной трансформации химические вещества подразделяют на:
 используемые в производственной деятельности без последующей трансформации химических свойств;
 используемые в производственной деятельности для преднамеренных технологически обусловленных химических реакций, вызывающих возникновение новых веществ с иными химическими свойствами;
 возникающие непреднамеренно в процессе производства и трудовых операций новые химические вещества с иными химическими свойствами.
      По критерию опасного и (или) вредного воздействия на организм, работающего химические вещества, подразделяют на:
 непосредственно действующие на организм работающего как опасные и вредные производственные факторы химической природы действия;
 косвенно действующие на организм работающего как опасные и вредные производственные факторы физической природы действия, обусловленные свойствами этих химических веществ воспламеняться, гореть, тлеть, взрываться и т.п.
      Для целей разработки средств защиты выделяют отдельные группы химических веществ, связанных с химической продукцией и специфично воздействующих на человека:
 вещества, обладающие острой токсичностью по воздействию на организм (ядовитые вещества/химикаты/химическая продукция);
 вещества, вызывающие поражение (некроз/омертвление или раздражение) кожи;
 вещества, вызывающие серьезные повреждения или раздражение глаз;
 мутагенные вещества;
 канцерогенные вещества;
 сенсибилизирующие (аллергенные) вещества;
 вещества, воздействующие на функцию воспроизводства;
 вещества, обладающие избирательной токсичностью на органы-мишени и (или) системы при однократном воздействии;
 вещества, обладающие избирательной токсичностью на органы-мишени и (или) системы при многократном или продолжительном воздействии;
 вещества, представляющие опасность при аспирации. 

      6.4.3 Мероприятия по снижению воздействия вредных химических соединений на рабочих местах
      Во всех случаях наибольшая эффективность достигается при уменьшении интенсивности взаимодействия с химическими соединениями в источнике их возникновения путем выбора специальной конструкции с соответствующим уровнем химической защиты,  инструмента, использования соответствующих материалов, высокого качества изготовления деталей, их правильного монтажа и эксплуатации. 
      При выборе способов и средств защиты следует использовать возможность замены износившейся химической защиты на более современную. Рационально использовать дистанционное управление, ограничивать время работы возле загрязненных областей, предупреждать опасное маскирующее воздействие интенсивных источников.
      В последние годы разработано и внедрено на практике много весьма эффективных звукоизолирующих устойчивых к химическому воздействию материалов, специальных конструкций и преград. Широкое использование их для изоляции, локализации, снижения уровня шума должно быть одним из важных профилактических направлений.
      Также при работе с оборудованием, которое подвергалось воздействию химическими соединениями необходимо использовать средства личной химической защиты.
      Средства индивидуальной защиты на предприятии, получаемые сотрудником, должны соответствовать его росту, размеру и, что немаловажно, виду выполняемого задания.
      Приспособления для повышения безопасности на производстве делятся на:
 изолирующие костюмы;
 средство индивидуальной защиты органов дыхания;
 специальная защитная одежда;
 средство индивидуальной защиты ног и рук;
 средство индивидуальной защиты головы, глаз, лица, органов слуха;
 дерматологические средство индивидуальной защиты;
 комплексные средство индивидуальной защиты.
      Пневмокостюмы, гидроизолирующие костюмы и скафандры относят к разделу защитных изолирующих костюмов. Пневмокостюмы служат для применения при стандартном атмосферном давлении, защищая человека от влияния внешних факторов. Гидроизолирующие костюмы и скафандры используются для работы при сверхнизких и сверхвысоких температурах, под водой.
      Любые приспособления, носимые на лице человека для его безопасности, относят к СИЗ органов дыхания. К ним относят противогазы, маски, респираторы. Их подбор зависит от внешних причин, а при выборе полагается учитывать степень загрязнения помещения, природу опасности, состав химических средств, их характеристики.
      Спецодежда (комбинезон, халат, костюм, бельё, фартуки) обеспечивает защиту от негативных факторов на предприятии. Чтобы одежда была комфортной и максимально защищала, ее в основном изготавливают из лёгких сорочечных тканей с полиэфирным составом волокна.
      Защита ног и рук обеспечивается посредством ношения сапог, бот, ботинок, полусапог, галош, щитков, нарукавников, рукавиц, перчаток. Обувь должна способствовать защите от ударов, не быть скользкой, защищать от высоких и низких температур, влаги, опасных факторов и тока. Помимо этого, она должна быть комфортной, надежной и подходить по размеру стопы. СИЗ головы делятся на каски, косынки, шлемы, шапки, которые защищают от повреждений. Очки являются методом защиты глаз, для защиты лица используют лицевые щитки, для органов слуха используют наушники или противошумные шлемы.
      В качестве защиты кожи используют, как правило, крема и очистители. Они относятся к дерматологическим защитным средствам. Чтобы защитить человека сразу от ряда опасных факторов, существуют комплексные СИЗ. К таким относятся фартуки, они должны являться плотными и влагоустойчивыми, также быть стойкими к различным видам загрязнений.
      6.5 Выводы и предложения по улучшению условий труда
      
      В мероприятиях по улучшению условий труда в Академии Связи принимают участие все структурные подразделения с участием представителей профсоюзного комитета.
      Для аттестации рабочих мест по условиям труда назначается аттестационная комиссия, и утверждается руководителем предприятия следующие перечни:
      – перечень рабочих мест по профессиям и должностям, на которых работающим по результатам аттестации подтверждены особые условия труда, соответствующие требованиям списков производств, работ, профессий, должностей и показателей, дающих право на пенсию по возрасту за работу с особыми условиями труда; 
      – перечень рабочих мест по профессиям и должностям, на которых работающим по результатам аттестации подтверждено право на дополнительный отпуск за работу с вредными и (или) опасными условиями труда;
      – перечень рабочих мест по профессиям и должностям, на которых работающим по результатам аттестации подтверждено право на доплаты за работу с вредными и (или) опасными условиями труда;
      Мероприятия по выполнению требований данных перечней включить в план мероприятий по улучшению условий труда.
      Через реализацию данных мероприятий уменьшится вредное влияние факторов производственной среды и трудового процесса.
      Контроль выполнения плана мероприятий по улучшению условий труда осуществляется руководителям структурных подразделений и ООТ.


     СПИСОК ИСПОЛЬЗУЕМОЙ ЛИТЕРАТУРЫ
     
 Левитин А. Алгоритмы. Введение в разработку и анализ. Вильямс, 2006. 35–36 с.
 Kona H., Burde A., Dr. Zanwar D. R. A Review of Traveling Salesman Problem with Time Window Constraint // IJIRST – International Journal for Innovative Research in Science & Technology, 2015. Vol. 2, Issue 1. P. 253– 254. 
 Tannenbaum P. Excursions in Mathematics. University of Kansas, 2011. P. 25. 
 Clausen J. Branch and Bound Algorithms – Principles and Examples. University of Copenhagen, 1999. P. 5-6. 	
 Tollis I. G. Algorithms and Complexity. University of Crete, 2000. P. 140–146. 
 Applegate D., Bixby R., Chvatal V., Cook W. TSP cuts outside the template paradigm. Donet, 2000. P. 1–10. 
 Захарова Е.М., Минашина И.К. Обзор методов многомерной оптимизации // Информационные процессы, 2014. Том 14, № 3. стр. 265– 266. 
 Papadimitriou C., Vazirani U. Efficient Algorithms and Intractable Problems. Berkeley EECS, 1999. Chapter 10. 
 Goodrich M., Roberto T. Algorithm Design and Applications, Wiley, 2015. P. 513–514. 
 Nilsson C. Heuristics for the Traveling Salesman Problem. Linkoping University, 2011. P. 1–6.
 Alsalibi B.A., Jelodar M.B., Venkat I. A Comparative Study between the Nearest Neighbor and Genetic Algorithms: A revisit to the Traveling Salesman Problem // International Journal of Computer Science and Electronics Engineering (IJCSEE), 2013. Vol. 1, Issue 1. 
 Gutin G.,Yeo A. The Greedy Algorithm for the Symmetric TSP. University of London, 2002. P. 1–2. 
 Gutin G., Karapetyan D. Lin-Kernighan Heuristic Adaptations for the Generalized Traveling Salesman Problem. Royal Holloway London University, 2010. P. 1–5. 
 Gupta R., Chauhan C., Pathak K. Survey of Methods of Solving TSP along with its Implementation using Dynamic Programming Approach. // International Journal of Computer Applications, 2012. Vol. 52, No.4. P. 1–6. 
 Basu S. Tabu Search Implementation on Traveling Salesman Problem and Its Variations: A Literature Survey. Indian Institute of Management Calcutta, 2012. P. 1–8. 
 Dorigo M., Caro G. D. Ant Algorithms for Discrete Optimization // Artificial Life, 1999. Vol. 5, No  2. P. 139–140. 	
 Dorigo M., Gambardella L. M. Ant colonies for the traveling salesman problem. Universit? Libre de Bruxelles, 1996. P. 1–4. 
 Johnson D. S., McGeoch L. A., Rothberg E. E. Asymptotic Experimental Analysis for the Held-Karp Traveling Salesman Bound. AT&T Bell Laboratories, 1999.  P. 1–2. 
 Логист. [электронный ресурс] http://logist.poncy.ru/  
 Speedy Route. [электронный ресурс] https://www.speedyroute.com/
 Бердж. К Задача о кратчайшем пути\\ Теория графов и ее применение = Theorie des graphes et ses applications/ Под ред. И.А.Вайнштейна – Москва. Издательство иностранной литературы. 1962-С. 75-81. – 320 с.
 Постановление №33   Гигиенический орматив [электронный ресурс] http://pravo.by/upload/docs/ op/W21327576p_1371157200.pdf  Дата доступа: 12.05.2019
 Алексеев В.Е, Таланов В.А Нахождение кратчайших путей в графе. Графы. Модели вычислений. Структуры данных. – Нижний Новгород. Издание Нижегородского гос. Университета 2005 – с 236-237. – 307с.
 Галкина В.А Построение кратчайших путей в ориентированном графе. Дискретная математика. Комбинаторика оптимизация на графах. – Москва, Издательство “Гелиос АРВ”, 203 – с 75-94 –232с.
 Евстигнеев В.А.  Интегративные алгоритмы глобального анализа графов. Путе и покрытия. Применение теории графов в программировании. Под ред А.П.Ершова – Москва. Наука. Главная редакция физико-математической литературы, 1985 – С. 138-150 – 352.
 Алан Бъюли “Изучаем SQL” 2007 – 881с.
 Алекс Кригель и др “SQL. Библия пользователя” 2-е издание 2010 г. – 450с.
 А.Ю Васильев “Работа с PostgreSQL: настройка и масштабирование”-643с.






